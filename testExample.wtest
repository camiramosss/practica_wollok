import example.*
describe "group of tests for pepita" {

  test "pepita has initial energy" {
    assert.equals(100, pepita.energy())
  }

}

//test practica superheroes
/*
describe "Tests de transportes y heroes" {

  test "ernesto tiene energia inicial" {
    assert.that(ernesto.energia()!=0)
  }

  test "ernesto come alfajor y su energia aumenta un 10%" {
    ernesto.comerAlfajor()
    assert.equals(55, ernesto.energia())
  }

  test "el 160 no puede despegar nunca" {
    assert.notThat(colectivo160.puedeDespegar())
  }

  test "la mision evitar choque puede ser cumplida por un heroe con suficiente energia" {
    assert.that(misionEvitarChoque.puedeCumplir(uma))
  }


test "Ernesto no puede volar" {
    assert.notThat(ernesto.puedeVolar())
  }

test "Uma puede volar si su medio de transporte puede volar" {
    uma.transporte(helicoptero)
    assert.that(uma.puedeVolar())
  }

test "la energía de Uma siempre es 500" {
    assert.equals(500, uma.energia())
  }

test "el helicóptero puede volar si su tanque tiene más de 10 litros de combustible" {
    assert.that(helicoptero.puedeDespegar())
  }

test "el helicóptero no puede volar si su tanque tiene menos de 10 litros de combustible" {
    helicoptero.combustible(5)
    assert.notThat(helicoptero.puedeDespegar())
  }

test "la misión evitar choque no puede ser cumplida por un héroe que tiene energía insuficiente" {
    assert.that(misionEvitarChoque.puedeCumplir(uma))
  }

test "la misión aerea puede ser cumplida por un héroe que vuele" {
    uma.transporte(helicoptero)
    assert.that(misionSalvarAvion.puedeCumplir(uma))
  }

test "la misión aerea no puede ser cumplida por un héroe que no vuele" {
    assert.notThat(misionSalvarAvion.puedeCumplir(ernesto))
  }

test "Cuando Aurora hace una cirugía su energía disminuye 5 unidades" {
    aurora.hacerCirugia()
    assert.equals(195, aurora.energia())
  }
}
*/

//tests entradas de cine
/*
describe "test sobre practica entradas de cine" {
salaNumerada.cambiarSistemaDeSonido(estandar)
salaNoNumerada.cambiarSistemaDeSonido(dolbySuperSarraun)
  
test "el valor de una entrada para la sala no numerada(con sistema dolby) con 0 asientos no supera los 10000"{
  salaNoNumerada.cambiarAsientos(0)
  assert.equals(salaNoNumerada.valorEntrada(), 10000)
  }

test "el valor de una entrada para la sala no numerada(con sistema dolby) con 100 asientos es 9900"{
  salaNoNumerada.asientos(100)
  assert.equals(salaNoNumerada.valorEntrada(), 9900)
}

test "el valor de una entrada para la sala numerada(con sistema estandar) es de 8000 "{
  assert.equals(salaNumerada.valorEntrada(), 8000)
}
}
*/

/*
describe "group of tests for Wollok Game Worlds" {

  test "josedeodo con 0 cansancio le gana a faker tilteado" {
    const partida1 = new Partida(jugadores = [josedeodo,faker])
    assert.equals(partida1.ganador(), josedeodo)
  }

  test "equipo con "{
    const equipo1 = new Equipo(jugadores = [faker,josedeodo])
    const equipo2 = new Equipo(jugadores = [josedeodo, caps])
    const partida2 = new Partida(jugadores = [equipo1,equipo2])
    assert.equals(partida2.ganador(), equipo2)
  }
}
*/

/*
describe "tests de stream wars" {
/* no sabemos porque es un numero aleatorio
test "una sesion de coscu con invitado a mrBeast con 33000000 de seguidores tiene una popularidad de 1420000"{
  const streamCoscu = new SesionDeCoscu (invitados = [mrBeast], suscriptores = 1000, momentoDelDia = noche)
  const mrBeast = new Invitado(seguidores = 33000000)
  assert.equals(streamCoscu.ganancias(), 1420000)
} */
/*
const cesarMilan = new Invitado(seguidores = 100000)
const episodio1 = new Sqv(canciones = 4, invitados = [cesarMilan])

test "un SQV con 4 canciones, con un invitado con 1000000 seguidores que juega con mascotas va a tener 4000 viewers"{
  assert.equals(episodio1.viewers(), 40000)
}

test "un SQV con 4 canciones, con un invitado con 1000000 seguidores que juega con mascotas va a tener un nivel de hype = "{
  assert.equals(episodio1.nivelDeHype(), 100)
}
}
*/

describe "tests de parrilla miguelito" {
const hamburguesa1 = new Hamburguesa(pesoMedallon = 90, tipoDePan = industrial)
const asado1 = new CorteDeCarne(peso = 300, tipoCorte = "asado", estaAPunto = true)
const parrillada1 = new Parrillada(platos = [hamburguesa1, asado1])
const joaquinsinho = new Comensal(tipoComensal= personaTodoTerreno, platosComprados = [asado1], dineroDisponible = 100000)
const milito = new Comensal(tipoComensal = personaTodoTerreno, platosComprados =[], dineroDisponible = 5)
method initialize(){elMiguelito.agregarPlatoAMenu(asado1)}

test "la parrillada no es apta para celiacos"{
  assert.notThat(parrillada1.esAptoCeliacos())
}

test "el peso de la parrillada1 es 450"{
  assert.equals(parrillada1.peso(), 450)
}

test"joaquinsinho se da un gusto"{
  joaquinsinho.seQuiereDarUnGusto()
  assert.that(joaquinsinho.dineroDisponible() > 0)
}

test"milito no se puede dar un gusto"{
	assert.throwsExceptionWithMessage("no alcanza para ningun plato", {milito.seQuiereDarUnGusto()})
}
}